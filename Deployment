ReplicaSet: A ReplicaSet's purpose is to maintain a stable set of replica Pods running at any given time. Usually, you define a Deployment and let that Deployment manage ReplicaSets automatically.


Create ReplicaSet Delete RS


Deployment: A Deployment manages a set of Pods to run an application workload, usually one that doesn't maintain state.
A Deployment provides declarative updates for Pods and ReplicaSets.

Create deployment

kubectl create deploy test-deployment --image nginx --replicas 4 --port 80

kubectl rollout status deployment test-deployment

Update image ```kubectl set image deploy test-deployment nginx=nginx:1.14.0 --record```` See the rollout history

kubectl rollout status deploy/test-deployment

kubectl rollout history deploy/test-deployment

kubectl set image test-deployment bootcamp nginx=nginx:1.14.a --record

kubectl rollout history deploy/test-deployment

kubectl rollout history deploy/test-deployment --revision=2

Rollback deployment when something goes wrong, you can also pause a rollout

kubectl rollout undo deployment/test-deployment --to-revision=1
Scale deployment, you can also do kubectl edit deployment

kubectl scale deployment/test-deployment --replicas=6

kubectl rollout pause deployment/test-deployment

For Recreate strategy

kubectl apply -f recreate.yaml
Update the image

kubectl set image deploy/demo-deployment demo=nginx:14.0

Your pod will all getting terminated and new ones getting created leading to little downtime.

Canary Deployment - Usually its done with Gateway API, service mesh etc but with deployment you can simulate like below:

kubectl apply -f canary-svc.yaml
kubectl apply -f deploy-canary.yaml
kubectl apply -f deploy -canary-v2.yaml
kubectl get pods -o=custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image --watch
Check the endpoints for the service created and you will see all in the endpoints ready to be served traffic.

Probes
Probes you can test by deploying probe.yaml and then deleting that, edit the yaml with port 8080 in the probe check and wait for sometime to see it fail.

readiness: Check if the pod is ready to accept traffic. check dependencies for the pods in terms of availability of service or latency issue check. 

startup: First this executes, until it's a success other probes are not executed.

liveness: The kubelet uses liveness probes to know when to restart a container. 
